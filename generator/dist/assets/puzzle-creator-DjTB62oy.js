(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))e(a);new MutationObserver(a=>{for(const r of a)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&e(n)}).observe(document,{childList:!0,subtree:!0});function o(a){const r={};return a.integrity&&(r.integrity=a.integrity),a.referrerPolicy&&(r.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?r.credentials="include":a.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function e(a){if(a.ep)return;a.ep=!0;const r=o(a);fetch(a.href,r)}})();class p{constructor(){this.currentStep=1,this.currentMode=null,this.generatedPuzzle=null,this.gameTemplate=null,this.loadGameTemplate(),this.initializeManualGroups()}async loadGameTemplate(){try{const t=await fetch("./game-template.html");if(!t.ok)throw new Error(`Failed to fetch template: ${t.status}`);this.gameTemplate=await t.text()}catch(t){console.error("Failed to load game template:",t),alert('Failed to load game template. Please run "npm run dev" to start the development server.')}}initializeManualGroups(){const t=document.getElementById("manual-groups");if(!t)return;const o=["yellow","green","blue","purple"],e=["Yellow (Easiest)","Green (Medium-Easy)","Blue (Medium-Hard)","Purple (Hardest)"];t.innerHTML="",o.forEach((a,r)=>{const n=document.createElement("div");n.className=`manual-group ${a}`,n.innerHTML=`
                <div class="group-header">
                    <div class="difficulty-badge ${a}">${e[r]}</div>
                    <input type="text" class="category-input" placeholder="Category name..." 
                           data-group="${r}">
                </div>
                <div class="words-grid">
                    <input type="text" class="word-input" placeholder="WORD 1" data-group="${r}" data-word="0">
                    <input type="text" class="word-input" placeholder="WORD 2" data-group="${r}" data-word="1">
                    <input type="text" class="word-input" placeholder="WORD 3" data-group="${r}" data-word="2">
                    <input type="text" class="word-input" placeholder="WORD 4" data-group="${r}" data-word="3">
                </div>
            `,t.appendChild(n)})}createPuzzleFromManual(){document.getElementById("puzzleTitle").value.trim();const t=[],o=["yellow","green","blue","purple"];for(let e=0;e<4;e++){const a=document.querySelector(`input.category-input[data-group="${e}"]`),r=a?a.value.trim():"";if(!r){alert(`Please enter a category name for the ${o[e]} group.`);return}const n=[];for(let l=0;l<4;l++){const d=document.querySelector(`input.word-input[data-group="${e}"][data-word="${l}"]`),u=d?d.value.trim().toUpperCase():"";if(!u){alert(`Please enter all 4 words for the ${o[e]} group.`);return}n.push(u)}t.push({category:r,words:n,difficulty:o[e]})}this.generatedPuzzle={groups:t},this.showStep(3),this.displayPuzzlePreview(this.generatedPuzzle)}createPuzzleFromJSON(){const t=document.getElementById("jsonData").value.trim();if(!t){alert("Please paste JSON game data.");return}try{const o=JSON.parse(t);if(!this.validatePuzzleData(o)){alert("Invalid JSON format. Please check the structure and try again.");return}this.generatedPuzzle=o,this.showStep(3),this.displayPuzzlePreview(this.generatedPuzzle)}catch(o){alert("Invalid JSON format: "+o.message)}}validatePuzzleData(t){if(!t.groups||!Array.isArray(t.groups)||t.groups.length!==4)return!1;const o=["yellow","green","blue","purple"],e=new Set;for(const a of t.groups){if(!a.category||!a.words||!a.difficulty||!Array.isArray(a.words)||a.words.length!==4||!o.includes(a.difficulty)||e.has(a.difficulty))return!1;e.add(a.difficulty)}return!0}getSampleData(){return{groups:[{category:"Types of Pasta",words:["PENNE","RIGATONI","FUSILLI","SPAGHETTI"],difficulty:"yellow"},{category:"Things in a Toolbox",words:["HAMMER","WRENCH","SCREWDRIVER","PLIERS"],difficulty:"green"},{category:"Words That Can Precede 'Board'",words:["SURF","CLIP","SCORE","DASH"],difficulty:"blue"},{category:"Homophones of Numbers",words:["WON","TOO","FOR","ATE"],difficulty:"purple"}]}}downloadSampleJSON(){const t=this.getSampleData(),o=new Blob([JSON.stringify(t,null,2)],{type:"application/json"}),e=URL.createObjectURL(o),a=document.createElement("a");a.href=e,a.download="linkages-sample.json",document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(e)}async copySampleJSON(){const t=this.getSampleData(),o=JSON.stringify(t,null,2);try{await navigator.clipboard.writeText(o);const e=document.querySelector('[onclick="copySampleJSON()"]'),a=e.textContent;e.textContent="✓ Copied!",e.style.background="#28a745",setTimeout(()=>{e.textContent=a,e.style.background=""},2e3)}catch{const a=document.createElement("textarea");a.value=o,document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),alert("Sample JSON copied to clipboard!")}}displayPuzzlePreview(t){const o=document.getElementById("puzzleGroups");o.innerHTML="",t.groups.forEach((e,a)=>{const r=document.createElement("div");r.className=`group-editor ${e.difficulty}`,r.innerHTML=`
                <div class="group-header">
                    <div class="difficulty-badge ${e.difficulty}">${e.difficulty.toUpperCase()}</div>
                    <input type="text" class="category-input" value="${e.category}" 
                           onchange="puzzleCreator.updateGroupCategory(${a}, this.value)">
                </div>
                <div class="words-grid">
                    ${e.words.map((n,l)=>`
                        <input type="text" class="word-input" value="${n}" 
                               onchange="puzzleCreator.updateGroupWord(${a}, ${l}, this.value)">
                    `).join("")}
                </div>
            `,o.appendChild(r)}),this.hideLoading(),this.showPuzzlePreview()}updateGroupCategory(t,o){this.generatedPuzzle&&(this.generatedPuzzle.groups[t].category=o)}updateGroupWord(t,o,e){this.generatedPuzzle&&(this.generatedPuzzle.groups[t].words[o]=e.toUpperCase())}generateGameHTML(){if(!this.generatedPuzzle||!this.gameTemplate)return alert("Please wait for the template to load or try refreshing the page."),null;const t=document.getElementById("puzzleTitle").value||"Linkages Puzzle",o="Find groups of four items that share something in common.";let e=this.gameTemplate;return e=e.replace(/\{\{TITLE\}\}/g,t),e=e.replace(/\{\{INSTRUCTIONS\}\}/g,o),e=e.replace(/\{\{GAME_DATA\}\}/g,JSON.stringify(this.generatedPuzzle,null,8)),{html:e,title:t}}getCleanFilename(t){let o=t.toLowerCase().replace(/[^a-z0-9\s-]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-").replace(/^-|-$/g,"");return o||(o="linkages-puzzle"),o.endsWith(".html")||(o+=".html"),o}async previewPuzzle(){const t=this.generateGameHTML();if(!t)return;const o=this.getCleanFilename(t.title),e=document.getElementById("previewContainer");e&&e.remove();try{const r=await(await fetch("/api/save-game",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({filename:o,content:t.html})})).json();r.success?(window.open(`/output/${r.filename}`,"_blank"),this.showPreviewSuccess()):alert("Failed to save game for preview: "+r.error)}catch(a){alert("Failed to save game for preview: "+a.message)}}downloadPuzzle(){const t=this.generateGameHTML();if(!t)return;const o=this.getCleanFilename(t.title),e=new Blob([t.html],{type:"text/html"}),a=URL.createObjectURL(e),r=document.createElement("a");r.href=a,r.download=o,document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(a)}showPreviewSuccess(){const t=document.getElementById("previewContainer");if(t)t.innerHTML=`
                <div class="preview-message">
                    <strong>✅ Game saved and opened in new tab!</strong>
                </div>
            `;else{const o=document.createElement("div");o.id="previewContainer",o.className="preview-container",o.innerHTML=`
                <div class="preview-message">
                    <strong>✅ Game saved and opened in new tab!</strong>
                </div>
            `;const e=document.querySelector("#step3 .button-group");e.parentNode.insertBefore(o,e)}setTimeout(()=>{const o=document.getElementById("previewContainer");o&&(o.style.opacity="0.5")},3e3)}showStep(t){for(let o=1;o<=3;o++){const e=document.getElementById(`step${o}`);e&&(o===t?(e.classList.add("active"),e.classList.remove("completed")):o<t?(e.classList.add("completed"),e.classList.remove("active")):e.classList.remove("active","completed"))}}showLoading(){document.getElementById("generationLoading").classList.add("show"),document.getElementById("puzzlePreview").classList.remove("show"),document.getElementById("generationError").style.display="none"}hideLoading(){document.getElementById("generationLoading").classList.remove("show")}showPuzzlePreview(){document.getElementById("puzzlePreview").classList.add("show")}showError(t){const o=document.getElementById("generationError");o.textContent=t,o.style.display="block",this.hideLoading()}}const i=new p;function m(s){i.currentMode=s,i.showStep(2),s==="wizard"?c("wizard"):s==="json"&&c("json")}function c(s){const t=document.querySelectorAll(".tab-btn"),o=document.querySelectorAll(".input-method");t.forEach(e=>e.classList.remove("active")),o.forEach(e=>e.classList.remove("active")),document.querySelector(`[onclick="switchInputMethod('${s}')"]`).classList.add("active"),document.getElementById(`${s}-input`).classList.add("active")}function g(){i.showStep(1)}function f(){i.showStep(2)}function h(){i.createPuzzleFromManual()}function w(){i.createPuzzleFromJSON()}function y(){i.downloadSampleJSON()}function z(){i.copySampleJSON()}function v(){i.previewPuzzle()}function S(){i.downloadPuzzle()}window.selectMode=m;window.switchInputMethod=c;window.backToStep1=g;window.backToStep2=f;window.createPuzzleFromManual=h;window.createPuzzleFromJSON=w;window.downloadSampleJSON=y;window.copySampleJSON=z;window.previewPuzzle=v;window.downloadPuzzle=S;
