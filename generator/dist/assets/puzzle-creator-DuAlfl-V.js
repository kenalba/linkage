(function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver(t=>{for(const o of t)if(o.type==="childList")for(const s of o.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&e(s)}).observe(document,{childList:!0,subtree:!0});function a(t){const o={};return t.integrity&&(o.integrity=t.integrity),t.referrerPolicy&&(o.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?o.credentials="include":t.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function e(t){if(t.ep)return;t.ep=!0;const o=a(t);fetch(t.href,o)}})();class d{constructor(){this.currentStep=1,this.currentMode=null,this.generatedPuzzle=null,this.gameTemplate=null,this.loadGameTemplate(),this.initializeManualGroups()}async loadGameTemplate(){try{const r=await fetch("./game-template.html");if(!r.ok)throw new Error(`Failed to fetch template: ${r.status}`);this.gameTemplate=await r.text()}catch(r){console.error("Failed to load game template:",r),alert('Failed to load game template. Please run "npm run dev" to start the development server.')}}initializeManualGroups(){const r=document.getElementById("manual-groups");if(!r)return;const a=["yellow","green","blue","purple"],e=["Yellow (Easiest)","Green (Medium-Easy)","Blue (Medium-Hard)","Purple (Hardest)"];r.innerHTML="",a.forEach((t,o)=>{const s=document.createElement("div");s.className=`manual-group ${t}`,s.innerHTML=`
                <div class="group-header">
                    <div class="difficulty-badge ${t}">${e[o]}</div>
                    <input type="text" class="category-input" placeholder="Category name..." 
                           data-group="${o}">
                </div>
                <div class="words-grid">
                    <input type="text" class="word-input" placeholder="WORD 1" data-group="${o}" data-word="0">
                    <input type="text" class="word-input" placeholder="WORD 2" data-group="${o}" data-word="1">
                    <input type="text" class="word-input" placeholder="WORD 3" data-group="${o}" data-word="2">
                    <input type="text" class="word-input" placeholder="WORD 4" data-group="${o}" data-word="3">
                </div>
            `,r.appendChild(s)})}createPuzzleFromManual(){document.getElementById("puzzleTitle").value.trim();const r=[],a=["yellow","green","blue","purple"];for(let e=0;e<4;e++){const t=document.querySelector(`input.category-input[data-group="${e}"]`),o=t?t.value.trim():"";if(!o){alert(`Please enter a category name for the ${a[e]} group.`);return}const s=[];for(let n=0;n<4;n++){const l=document.querySelector(`input.word-input[data-group="${e}"][data-word="${n}"]`),i=l?l.value.trim().toUpperCase():"";if(!i){alert(`Please enter all 4 words for the ${a[e]} group.`);return}s.push(i)}r.push({category:o,words:s,difficulty:a[e]})}this.generatedPuzzle={groups:r},this.showStep(3),this.displayPuzzlePreview(this.generatedPuzzle)}createPuzzleFromJSON(){const r=document.getElementById("jsonData").value.trim();if(!r){alert("Please paste JSON game data.");return}try{const a=JSON.parse(r);if(!this.validatePuzzleData(a)){alert("Invalid JSON format. Please check the structure and try again.");return}this.generatedPuzzle=a,this.showStep(3),this.displayPuzzlePreview(this.generatedPuzzle)}catch(a){alert("Invalid JSON format: "+a.message)}}validatePuzzleData(r){if(!r.groups||!Array.isArray(r.groups)||r.groups.length!==4)return!1;const a=["yellow","green","blue","purple"],e=new Set;for(const t of r.groups){if(!t.category||!t.words||!t.difficulty||!Array.isArray(t.words)||t.words.length!==4||!a.includes(t.difficulty)||e.has(t.difficulty))return!1;e.add(t.difficulty)}return!0}getSampleData(){return{groups:[{category:"Types of Pasta",words:["PENNE","RIGATONI","FUSILLI","SPAGHETTI"],difficulty:"yellow"},{category:"Things in a Toolbox",words:["HAMMER","WRENCH","SCREWDRIVER","PLIERS"],difficulty:"green"},{category:"Words That Can Precede 'Board'",words:["SURF","CLIP","SCORE","DASH"],difficulty:"blue"},{category:"Homophones of Numbers",words:["WON","TOO","FOR","ATE"],difficulty:"purple"}]}}downloadSampleJSON(){const r=this.getSampleData(),a=new Blob([JSON.stringify(r,null,2)],{type:"application/json"}),e=URL.createObjectURL(a),t=document.createElement("a");t.href=e,t.download="linkages-sample.json",document.body.appendChild(t),t.click(),document.body.removeChild(t),URL.revokeObjectURL(e)}async copySampleJSON(){const r=this.getSampleData(),a=JSON.stringify(r,null,2);try{await navigator.clipboard.writeText(a);const e=document.querySelector('[onclick="copySampleJSON()"]'),t=e.textContent;e.textContent="âœ“ Copied!",e.style.background="#28a745",setTimeout(()=>{e.textContent=t,e.style.background=""},2e3)}catch{const t=document.createElement("textarea");t.value=a,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),alert("Sample JSON copied to clipboard!")}}displayPuzzlePreview(r){const a=document.getElementById("puzzleGroups");a.innerHTML="",r.groups.forEach((e,t)=>{const o=document.createElement("div");o.className=`group-editor ${e.difficulty}`,o.innerHTML=`
                <div class="group-header">
                    <div class="difficulty-badge ${e.difficulty}">${e.difficulty.toUpperCase()}</div>
                    <input type="text" class="category-input" value="${e.category}" 
                           onchange="puzzleCreator.updateGroupCategory(${t}, this.value)">
                </div>
                <div class="words-grid">
                    ${e.words.map((s,n)=>`
                        <input type="text" class="word-input" value="${s}" 
                               onchange="puzzleCreator.updateGroupWord(${t}, ${n}, this.value)">
                    `).join("")}
                </div>
            `,a.appendChild(o)}),this.hideLoading(),this.showPuzzlePreview()}updateGroupCategory(r,a){this.generatedPuzzle&&(this.generatedPuzzle.groups[r].category=a)}updateGroupWord(r,a,e){this.generatedPuzzle&&(this.generatedPuzzle.groups[r].words[a]=e.toUpperCase())}generateGameHTML(){if(!this.generatedPuzzle||!this.gameTemplate)return alert("Please wait for the template to load or try refreshing the page."),null;const r=document.getElementById("puzzleTitle").value||"Linkages Puzzle",a="Find groups of four items that share something in common.";let e=this.gameTemplate;return e=e.replace(/\{\{TITLE\}\}/g,r),e=e.replace(/\{\{INSTRUCTIONS\}\}/g,a),e=e.replace(/\{\{GAME_DATA\}\}/g,JSON.stringify(this.generatedPuzzle,null,8)),{html:e,title:r}}getCleanFilename(r){let a=r.toLowerCase().replace(/[^a-z0-9\s-]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-").replace(/^-|-$/g,"");return a||(a="linkages-puzzle"),a.endsWith(".html")||(a+=".html"),a}async previewPuzzle(){const r=this.generateGameHTML();if(!r)return;const a=this.getCleanFilename(r.title);try{const t=await(await fetch("/api/save-game",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({filename:a,content:r.html})})).json();t.success?this.showPreviewLink(t.filename):alert("Failed to save game for preview: "+t.error)}catch(e){alert("Failed to save game for preview: "+e.message)}}downloadPuzzle(){const r=this.generateGameHTML();if(!r)return;const a=this.getCleanFilename(r.title),e=new Blob([r.html],{type:"text/html"}),t=URL.createObjectURL(e),o=document.createElement("a");o.href=t,o.download=a,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(t)}showPreviewLink(r){const a=document.getElementById("previewContainer");if(a)a.innerHTML=`
                <div class="preview-message">
                    <strong>âœ… Game saved successfully!</strong>
                    <a href="../output/${r}" target="_blank" class="preview-link">
                        ðŸŽ® Preview Game
                    </a>
                </div>
            `;else{const e=document.createElement("div");e.id="previewContainer",e.className="preview-container",e.innerHTML=`
                <div class="preview-message">
                    <strong>âœ… Game saved successfully!</strong>
                    <a href="../output/${r}" target="_blank" class="preview-link">
                        ðŸŽ® Preview Game
                    </a>
                </div>
            `;const t=document.querySelector("#step3 .button-group");t.parentNode.insertBefore(e,t)}}showStep(r){for(let a=1;a<=3;a++){const e=document.getElementById(`step${a}`);e&&(a===r?(e.classList.add("active"),e.classList.remove("completed")):a<r?(e.classList.add("completed"),e.classList.remove("active")):e.classList.remove("active","completed"))}}showLoading(){document.getElementById("generationLoading").classList.add("show"),document.getElementById("puzzlePreview").classList.remove("show"),document.getElementById("generationError").style.display="none"}hideLoading(){document.getElementById("generationLoading").classList.remove("show")}showPuzzlePreview(){document.getElementById("puzzlePreview").classList.add("show")}showError(r){const a=document.getElementById("generationError");a.textContent=r,a.style.display="block",this.hideLoading()}}new d;
